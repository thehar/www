<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Namecheap on Harley Alaniz | DevOps Architect</title>
    <link>https://thehar.com/tags/namecheap/index.xml</link>
    <description>Recent content in Namecheap on Harley Alaniz | DevOps Architect</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2017 | Follow on &lt;a href=&#34;https://twitter.com/thehar&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://github.com/mgjohansen/hucore.git&#34; target=&#34;_blank&#34;&gt;Hucore theme&lt;/a&gt; &amp; &lt;a href=&#34;http://gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; â™¥</copyright>
    <atom:link href="https://thehar.com/tags/namecheap/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Setup for Changin Times</title>
      <link>https://thehar.com/post/s3_setup_and_you/</link>
      <pubDate>Fri, 15 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://thehar.com/post/s3_setup_and_you/</guid>
      <description>

&lt;h1 id=&#34;step-0-get-a-domain-name-from-namecheap&#34;&gt;Step 0) Get a domain name from NameCheap.&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.namecheap.com&#34;&gt;NameCheap&lt;/a&gt; This is a pretty great registrar and they don&amp;rsquo;t support LGBT hating causes like GoDaddy.&lt;/p&gt;

&lt;h1 id=&#34;step-1-setup-a-github-account-and-organization&#34;&gt;Step 1) Setup a Github Account and Organization.&lt;/h1&gt;

&lt;p&gt;It&amp;rsquo;s pretty simple - you &lt;a href=&#34;https://github.com/join&#34;&gt;signup&lt;/a&gt;,
&lt;a href=&#34;https://help.github.com/articles/creating-a-new-organization-from-scratch/&#34;&gt;create an organization&lt;/a&gt;,
and then &lt;a href=&#34;https://help.github.com/articles/creating-a-new-repository/&#34;&gt;create a new git repository&lt;/a&gt;
under that github organization.&lt;/p&gt;

&lt;p&gt;If this is truly your first time ever using github you&amp;rsquo;re going to have to
&lt;a href=&#34;https://help.github.com/articles/generating-ssh-keys/&#34;&gt;create an ssh key-pair&lt;/a&gt;,
which is used to authenticate you so you can push up your code.&lt;/p&gt;

&lt;h1 id=&#34;step-2-start-blogging-locally-with-hugo&#34;&gt;Step 2) Start blogging locally with Hugo.&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;Hugo&lt;/a&gt; is a more modern, much faster, version of
&lt;a href=&#34;https://github.com/jekyll/jekyll&#34;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main advantage I see for using Hugo over Jekyll is that Hugo makes it much
easier to build static websites that are not blogs, and you don&amp;rsquo;t need ruby to
build website - you simply need a static Go binary.&lt;/p&gt;

&lt;p&gt;Follow &lt;a href=&#34;http://gohugo.io/overview/introduction/&#34;&gt;this introduction&lt;/a&gt; and within
two minutes you should be well on your way to setting up a blog.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Side funny note: Don&#39;t use Wordpress, ever. Unless you want to pay to host it
with wordpress.com.  It&#39;s a pile of crap and you have a much larger attack vector
to deal with when you host a WP site yourself. (Feel free to email and ask about this)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-3-create-an-aws-account&#34;&gt;Step 3) Create an AWS Account.&lt;/h1&gt;

&lt;p&gt;AWS is a great way to serve up your website for pennies in the first year.  You get
a free tier.&lt;/p&gt;

&lt;p&gt;But for now simply create a new account, and figure out away to get yourself
some admin keys (AWS_ACCESS_KEY and AWS_SECRET_KEY) because you will need these
to setup your AWS account to host this blog.&lt;/p&gt;

&lt;p&gt;You will need to install &lt;code&gt;aws-cli&lt;/code&gt; in order to run &lt;code&gt;aws configure&lt;/code&gt; and maintain
your keys locally correctly.  Please see the [Changin Times] entry from 04-15-2017.&lt;/p&gt;

&lt;h1 id=&#34;step-4-use-a-terraform-script-to-setup-your-aws-account-for-the-blog&#34;&gt;Step 4) Use a Terraform script to setup your AWS account for the blog.&lt;/h1&gt;

&lt;p&gt;I built you out a simple &lt;a href=&#34;https://terraform.io/&#34;&gt;Terraform&lt;/a&gt; script which you
can use to create all the required things to host a website in S3.&lt;/p&gt;

&lt;p&gt;I personally use &lt;code&gt;us-west-2&lt;/code&gt;, Oregon&amp;rsquo;s AWS region, because it is the cheapest and
you get all the shiny new products.&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href=&#34;https://github.com/thehar/www/blob/master/tf/setup.tf&#34;&gt;script&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-terraform&#34;&gt;provider &amp;quot;aws&amp;quot; {
  access_key = &amp;quot;AWS_ACCESS_KEY&amp;quot;
  secret_key = &amp;quot;AWS_SECRET_KEY&amp;quot;
  region = &amp;quot;us-west-2&amp;quot;
}

variable &amp;quot;domain_name&amp;quot; {
  default = &amp;quot;domain.com&amp;quot;
}

resource &amp;quot;aws_s3_bucket&amp;quot; &amp;quot;blog&amp;quot; {
  bucket = &amp;quot;${var.domain_name}&amp;quot;
  region = &amp;quot;us-west-2&amp;quot;
  acl = &amp;quot;public-read&amp;quot;
  policy = &amp;lt;&amp;lt;EOF
{
  &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
  &amp;quot;Statement&amp;quot;: [{
    &amp;quot;Sid&amp;quot;: &amp;quot;AddPerm&amp;quot;,
    &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
    &amp;quot;Principal&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;Action&amp;quot;: &amp;quot;s3:GetObject&amp;quot;,
    &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::${var.domain_name}/*&amp;quot;
  }]
}
EOF

  website {
    index_document = &amp;quot;index.html&amp;quot;
    error_document = &amp;quot;error.html&amp;quot;
  }
}

resource &amp;quot;aws_s3_bucket&amp;quot; &amp;quot;wwwblog&amp;quot; {
  bucket = &amp;quot;www.${var.domain_name}&amp;quot;
  region = &amp;quot;us-west-2&amp;quot;
  acl = &amp;quot;public-read&amp;quot;
  website {
    redirect_all_requests_to = &amp;quot;${var.domain_name}&amp;quot;
  }
}


resource &amp;quot;aws_route53_record&amp;quot; &amp;quot;blog&amp;quot; {
  zone_id = &amp;quot;${aws_route53_zone.primary.zone_id}&amp;quot;
  name = &amp;quot;${var.domain_name}&amp;quot;
  type = &amp;quot;A&amp;quot;
  alias {
    name = &amp;quot;${aws_s3_bucket.blog.website_domain}&amp;quot;
    zone_id = &amp;quot;${aws_s3_bucket.blog.hosted_zone_id}&amp;quot;
    evaluate_target_health = true
  }
}

resource &amp;quot;aws_iam_user&amp;quot; &amp;quot;blog_deploy&amp;quot; {
  name = &amp;quot;${var.domain_name}_blog_deploy&amp;quot;
  path = &amp;quot;/s3/&amp;quot;
}

resource &amp;quot;aws_iam_access_key&amp;quot; &amp;quot;blog_deploy&amp;quot; {
  user = &amp;quot;${aws_iam_user.blog_deploy.name}&amp;quot;
}

resource &amp;quot;aws_iam_user_policy&amp;quot; &amp;quot;blog_deploy_rw&amp;quot; {
  name = &amp;quot;${var.domain_name}_rw&amp;quot;
  user = &amp;quot;${aws_iam_user.blog_deploy.name}&amp;quot;
  policy = &amp;lt;&amp;lt;EOF
{
  &amp;quot;Statement&amp;quot;: [{
    &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
    &amp;quot;Action&amp;quot;: [
      &amp;quot;s3:ListBucket&amp;quot;,
      &amp;quot;s3:GetBucketLocation&amp;quot;,
      &amp;quot;s3:ListBucketMultipartUploads&amp;quot;
    ],
    &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::${var.domain_name}&amp;quot;,
    &amp;quot;Condition&amp;quot;: {}
  }, {
    &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
    &amp;quot;Action&amp;quot;: [
      &amp;quot;s3:AbortMultipartUpload&amp;quot;,
      &amp;quot;s3:DeleteObject&amp;quot;,
      &amp;quot;s3:DeleteObjectVersion&amp;quot;,
      &amp;quot;s3:GetObject&amp;quot;,
      &amp;quot;s3:GetObjectAcl&amp;quot;,
      &amp;quot;s3:GetObjectVersion&amp;quot;,
      &amp;quot;s3:GetObjectVersionAcl&amp;quot;,
      &amp;quot;s3:PutObject&amp;quot;,
      &amp;quot;s3:PutObjectAcl&amp;quot;,
      &amp;quot;s3:PutObjectAclVersion&amp;quot;
    ],
    &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::${var.domain_name}/*&amp;quot;,
    &amp;quot;Condition&amp;quot;: {}
  }, {
    &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
    &amp;quot;Action&amp;quot;: &amp;quot;s3:ListAllMyBuckets&amp;quot;,
    &amp;quot;Resource&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;Condition&amp;quot;: {}
  }]
}
EOF
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before you can use this you&amp;rsquo;ll need to substitute out &lt;code&gt;AWS_ACCESS_KEY&lt;/code&gt;,
&lt;code&gt;AWS_SECRET_KEY&lt;/code&gt;, and &lt;code&gt;domain.com&lt;/code&gt; with the appropriate values.&lt;/p&gt;

&lt;p&gt;If you really are against using Terraform to setup this configuration you can
of course always use &lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html&#34;&gt;the guide&lt;/a&gt;
from Amazon directly.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t worry, we&amp;rsquo;ll have more blogs about Terraform and other AWS + CM tools.&lt;/p&gt;

&lt;h1 id=&#34;step-5&#34;&gt;Step 5)&lt;/h1&gt;

&lt;h1 id=&#34;step-6-get-a-travis-ci-account&#34;&gt;Step 6) Get a Travis CI account.&lt;/h1&gt;

&lt;p&gt;You might want to follow &lt;a href=&#34;https://docs.travis-ci.com/user/for-beginners&#34;&gt;this guide&lt;/a&gt;
to get your feet wet with Travis CI.&lt;/p&gt;

&lt;h1 id=&#34;step-7-add-a-travis-yml-to-your-blog-repository&#34;&gt;Step 7) Add a .travis.yml to your blog repository.&lt;/h1&gt;

&lt;p&gt;Here is a basic &lt;code&gt;.travis.yml&lt;/code&gt; you&amp;rsquo;ll want to use which will publish your blog
upon every push to your repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: go
install: go get -v github.com/spf13/hugo
script:
  - hugo
  - python --version
  - sudo pip install s3cmd
  - s3cmd sync --delete-removed -P -M -r public/ s3://thehar.com/
notifications:
    email:
        on_failure: always
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, &lt;a href=&#34;https://docs.travis-ci.com/user/environment-variables/#Defining-Variables-in-Repository-Settings&#34;&gt;as described here&lt;/a&gt;,
you will want to add the &lt;code&gt;AWS_ACCESS_KEY&lt;/code&gt; and &lt;code&gt;AWS_SECRET_KEY&lt;/code&gt; keys of the S3 user,
which was created via the Terraform script, as build environment variables in the
Travis CI project.&lt;/p&gt;

&lt;p&gt;The keys can be found in the &lt;code&gt;*.tfstate&lt;/code&gt; file created when the Terraform script
was applied.&lt;/p&gt;

&lt;p&gt;Note, we chose to use s3cmd because the provided Travis CI S3 deploy step
doesn&amp;rsquo;t allow you to actually &amp;lsquo;sync&amp;rsquo;. Meaning if files are removed from your
blog, their deploy step doesn&amp;rsquo;t remove them, and all files are always uploaded
to the bucket, even if they haven&amp;rsquo;t changed, slowing down the deploy, and costing you money.&lt;/p&gt;

&lt;h3 id=&#34;some-credit-belongs-to-continuousfailure-com-for-this-post&#34;&gt;Some credit belongs to continuousfailure.com for this post&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>